# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zK_uAYcyxmECixZqj8CN1-BxU-kLPyw
"""

# vdovichenko
# input_text = '''q0 q1 q2
# a b c
# q2
# q0 a q0
# q0 a q1
# q1 c q0
# q1 b q1
# q1 a q2
# q2 a q2'''

# varianta 20
# input_text = '''q0 q1 q2 q3
# a b c
# q3
# q0 a q0
# q0 a q1
# q2 a q2
# q1 b q2
# q2 c q3
# q3 c q3'''

# varianta 10
input_text = '''q0 q1 q2 q3
a b c
q3
q0 a q1
q1 b q2
q2 c q3
q3 a q1
q1 b q1
q0 b q2'''

# geeks for geeks
# input_text = '''q0 q1 q2
# a b
# q2
# q0 a q0
# q0 a q1
# q0 b q0
# q1 b q2'''

with open('input.txt', 'w') as f:
    f.write(input_text)

from collections import OrderedDict
from copy import deepcopy
import pandas as pd
import graphviz

def read_nfa(file_name='input.txt'):
    with open(file_name) as f:
        lines = f.readlines()

    nonterms = lines[0].split()
    terms = lines[1].split()
    final = lines[2].strip()

    nfa = OrderedDict()
    for nonterm in nonterms:
        nfa[nonterm] = OrderedDict()
        for term in terms:
            nfa[nonterm][term] = []

    for line in lines[3 : ]:
        prev, label, next = line.split()
        nfa[prev][label].append(next)

    return nfa, final

def create_table(fa):
    data = []
    for values in fa.values():
        row = []
        for value in values.values():
            row.append(''.join(value) if len(value) != 0 else '----')
        data.append(row)

    df = pd.DataFrame(data=data, index=fa.keys(), columns=values.keys())
    return df

def draw_nfa(nfa, final, starts_from='q0'):
    g = graphviz.Digraph()

    for prev, row in nfa.items():
        for label, cell in row.items():
            for next in cell:
                g.edge(prev, next, label=label)

    g.node('', color='#ffffff')
    g.edge('', starts_from)
    g.node(final, penwidth='5')
    return g

# helper function
def add_rows(rows):
    result = deepcopy(rows[0])

    for row in rows[1 : ]:
        for key, value in row.items():
            result[key] += value

    for key in result:
        result[key] = list(dict.fromkeys(result[key]))
        result[key].sort()

    return result


def nfa2dfa(nfa, starts_from='q0'):
    dfa = OrderedDict()
    Q = [ [ starts_from ] ]

    while len(Q) != len(dfa.keys()):
        arr = Q[len(dfa.keys())]
        new_state = ''.join(arr)
        new_row = add_rows([nfa[a] for a in arr])
        dfa[new_state] = new_row
        for cell in new_row.values():
            if cell not in Q and cell != []:
                Q.append(cell)

    return dfa

def draw_dfa(dfa, final, starts_from='q0'):
    g = graphviz.Digraph()
    for prev, row in dfa.items():
        for label, next in row.items():
            if next != []:
                g.edge(prev, ''.join(next), label=label)
        
        if final in prev:
            g.node(prev, penwidth='5')

    g.node('', color='#ffffff')
    g.edge('', starts_from)
    
    return g

nfa, final = read_nfa()
create_table(nfa)

draw_nfa(nfa, final)

dfa = nfa2dfa(nfa)
create_table(dfa)

draw_dfa(dfa, final)