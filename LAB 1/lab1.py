# -*- coding: utf-8 -*-
"""LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P0-lZRGPAk7arz58Tl9y8cGEpbyNed5D
"""

with open('grammar.txt', 'r') as f:
    input_lines = f.read().split('\n')

non_terminal = set(input_lines[0].split())
terminal = set(input_lines[1].split())

adj_list = {}
for line in input_lines[2 : ]:
    key, value = line.split()
    if len(value) == 2:
        value = (value[1], value[0])
    else:
        value = ('Finish', value[0])

    if key in adj_list:
        adj_list[key].append(value)
    else:
        adj_list[key] = [ value ]

adj_list

import graphviz
def Finit_Automata (adj_list):
  g = graphviz.Digraph()

  for node in adj_list:
      for value in adj_list[node]:
          adj_node, weight = value
          g.edge(node, adj_node, label = weight)

  g.node('', color = '#ffffff')
  g.edge('', 'S')
  g.node('Finish', color ='#ffffff')
  return g

g = Finit_Automata(adj_list)
g

def acceptable(string, adj_list2, start='S'):
    cn = start
    for ch in string:
        if cn == 'Finish':
            return False

        for adj_node, weight in adj_list2[cn]:
            if ch == weight:
                cn = adj_node
                break
        else:
            return False

    return cn == 'Finish'

print(acceptable('abcba', adj_list))

import random
def wg (adj_list, start = 'S'):
    g = graphviz.Digraph()
    id = 0
    cn = start
    cn_id = str(id) + cn
    min_l = len(adj_list.keys()) + 2
    word = ''
    print('Derivation table:')
    while cn != 'Finish':

      if cn == 'L' and len(word) < min_l:
        a = 2
      else:
        a = len(adj_list[cn])

      t = random.randrange(0,a)
      adj_node, weight = adj_list[cn][t]
      word += weight

      weight_id = str(id) + weight
      adj_node_id = str(id) + adj_node 

      g.node(cn_id, label = cn)
      g.node(weight_id, label = weight)
      g.edge(cn_id, weight_id)

      if adj_node != 'Finish':
        g.node(adj_node_id, label = adj_node)
        g.edge(cn_id, adj_node_id)
      
      cn = adj_node
      cn_id = adj_node_id

      if cn != 'Finish':
        print('Step ', id, ' = ', word + cn)
        id+=1
      else:
        print('Step ', id, ' = ', word)
    
    return g, word

g1, str1 = wg(adj_list)
print('Word: ', str1)
print('Derivation Tree:')
g1