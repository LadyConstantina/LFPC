# -*- coding: utf-8 -*-
"""LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P0-lZRGPAk7arz58Tl9y8cGEpbyNed5D
"""

with open('grammar2.txt', 'r') as f:
    input_lines = f.read().split('\n')

non_terminal = list(input_lines[0].split())
terminal = list(input_lines[1].split())

adj_list = {}
adj_list2 = {}

for line in input_lines[2 : ]:
    key, value = line.split()
    if len(value) == 2:
        value_t = (value[1], value[0])
    else:
        value_t = ('Finish', value[0])

    if key in adj_list:
        adj_list[key].append(value_t)
    else:
        adj_list[key] = [ value_t ]

    id = 'q' + str(non_terminal.index(key))
    if value_t[0] != 'Finish':
        value_t = ('q' + str(non_terminal.index(value_t[0])) , value_t[1])

    if id in adj_list2:
        adj_list2[id].append(value_t)
    else:
        adj_list2[id] = [ value_t ]
        

print(adj_list)
print(adj_list2)

import graphviz
def Finit_Automata (adj_list):
  g = graphviz.Digraph()

  for node in adj_list:
      for value in adj_list[node]:
          adj_node, weight = value
          g.edge(node, adj_node, label = weight)

  g.node('', color = '#ffffff')
  g.edge('', list(adj_list.keys())[0])
  g.node('Finish', color ='#ffffff')
  return g

g = Finit_Automata(adj_list2)
g

def acceptable(string, adj_list):
    cn = list(adj_list.keys())[0]
    for ch in string:
        if cn == 'Finish':
            return False

        for adj_node, weight in adj_list[cn]:
            if ch == weight:
                cn = adj_node
                break
        else:
            return False

    return cn == 'Finish'

print(acceptable('acbb', adj_list2))

import random
def wg (adj_list):
    g = graphviz.Digraph()
    id = 0
    cn = list(adj_list.keys())[0]
    cn_id = str(id) + cn
    min_l = len(non_terminal) + 2
    word = ''
    print('Derivation table:')
    while cn != 'Finish':

      if cn == list(adj_list.keys())[len(non_terminal)-1] and len(word) < min_l:
        a = 2
      else:
        a = len(adj_list[cn])

      t = random.randrange(0,a)
      adj_node, weight = adj_list[cn][t]
      word += weight

      weight_id = str(id) + weight
      adj_node_id = str(id) + adj_node 

      g.node(cn_id, label = cn)
      g.node(weight_id, label = weight)
      g.edge(cn_id, weight_id)

      if adj_node != 'Finish':
        g.node(adj_node_id, label = adj_node)
        g.edge(cn_id, adj_node_id)
      
      cn = adj_node
      cn_id = adj_node_id

      if id == 0:
        print('Step ', id,' ', list(adj_list.keys())[0], ' = ', word + cn)
      elif cn != 'Finish' and id > 0:
        print('Step ', id, '     = ', word + cn)
      else:
        print('Step ', id, '     = ', word)

      id += 1
    
    return g, word

g, str1 = wg(adj_list)
print('Word: ', str1)
print('Derivation Tree:')
g